/*
 * generated by Xtext
 */
package maxim.zaks.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import maxim.zaks.services.FlatBuffersGrammarAccess;

public class FlatBuffersParser extends AbstractContentAssistParser {
	
	@Inject
	private FlatBuffersGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected maxim.zaks.ui.contentassist.antlr.internal.InternalFlatBuffersParser createParser() {
		maxim.zaks.ui.contentassist.antlr.internal.InternalFlatBuffersParser result = new maxim.zaks.ui.contentassist.antlr.internal.InternalFlatBuffersParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getAttributeNameAccess().getAlternatives(), "rule__AttributeName__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getVectorAccess().getAlternatives_1(), "rule__Vector__Alternatives_1");
					put(grammarAccess.getPrimitiveAccess().getAlternatives(), "rule__Primitive__Alternatives");
					put(grammarAccess.getSchemaAccess().getGroup(), "rule__Schema__Group__0");
					put(grammarAccess.getRootTypeAccess().getGroup(), "rule__RootType__Group__0");
					put(grammarAccess.getCustomAttributesAccess().getGroup(), "rule__CustomAttributes__Group__0");
					put(grammarAccess.getFileIdentifierAccess().getGroup(), "rule__FileIdentifier__Group__0");
					put(grammarAccess.getNamespaceAccess().getGroup(), "rule__Namespace__Group__0");
					put(grammarAccess.getIncludeAccess().getGroup(), "rule__Include__Group__0");
					put(grammarAccess.getTableAccess().getGroup(), "rule__Table__Group__0");
					put(grammarAccess.getFieldsAccess().getGroup(), "rule__Fields__Group__0");
					put(grammarAccess.getFieldsAccess().getGroup_3(), "rule__Fields__Group_3__0");
					put(grammarAccess.getFieldAttributesAccess().getGroup(), "rule__FieldAttributes__Group__0");
					put(grammarAccess.getVectorAccess().getGroup(), "rule__Vector__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getNumberAccess().getGroup(), "rule__Number__Group__0");
					put(grammarAccess.getNumberAccess().getGroup_1(), "rule__Number__Group_1__0");
					put(grammarAccess.getSchemaAccess().getIncludesAssignment_0(), "rule__Schema__IncludesAssignment_0");
					put(grammarAccess.getSchemaAccess().getNamepsaceAssignment_1(), "rule__Schema__NamepsaceAssignment_1");
					put(grammarAccess.getSchemaAccess().getFileIdentifierAssignment_2(), "rule__Schema__FileIdentifierAssignment_2");
					put(grammarAccess.getSchemaAccess().getCustomAttributesAssignment_3(), "rule__Schema__CustomAttributesAssignment_3");
					put(grammarAccess.getSchemaAccess().getTablesAssignment_4(), "rule__Schema__TablesAssignment_4");
					put(grammarAccess.getSchemaAccess().getRootTypeAssignment_5(), "rule__Schema__RootTypeAssignment_5");
					put(grammarAccess.getRootTypeAccess().getTypeAssignment_1(), "rule__RootType__TypeAssignment_1");
					put(grammarAccess.getCustomAttributesAccess().getNameAssignment_2(), "rule__CustomAttributes__NameAssignment_2");
					put(grammarAccess.getNamespaceAccess().getNameAssignment_1(), "rule__Namespace__NameAssignment_1");
					put(grammarAccess.getTableAccess().getNameAssignment_1(), "rule__Table__NameAssignment_1");
					put(grammarAccess.getTableAccess().getFieldsAssignment_3(), "rule__Table__FieldsAssignment_3");
					put(grammarAccess.getFieldsAccess().getNameAssignment_0(), "rule__Fields__NameAssignment_0");
					put(grammarAccess.getFieldsAccess().getTypeAssignment_2(), "rule__Fields__TypeAssignment_2");
					put(grammarAccess.getFieldsAccess().getDefaultValueAssignment_3_1(), "rule__Fields__DefaultValueAssignment_3_1");
					put(grammarAccess.getFieldsAccess().getAttributesAssignment_4(), "rule__Fields__AttributesAssignment_4");
					put(grammarAccess.getFieldAttributesAccess().getAttributeListAssignment_0(), "rule__FieldAttributes__AttributeListAssignment_0");
					put(grammarAccess.getFieldAttributesAccess().getAtributeNameAssignment_1(), "rule__FieldAttributes__AtributeNameAssignment_1");
					put(grammarAccess.getAttributeNameAccess().getDeprectatedAssignment_0(), "rule__AttributeName__DeprectatedAssignment_0");
					put(grammarAccess.getAttributeNameAccess().getCustomNameAssignment_1(), "rule__AttributeName__CustomNameAssignment_1");
					put(grammarAccess.getTypeAccess().getPrimTypeAssignment_0(), "rule__Type__PrimTypeAssignment_0");
					put(grammarAccess.getTypeAccess().getVectorTypeAssignment_1(), "rule__Type__VectorTypeAssignment_1");
					put(grammarAccess.getTypeAccess().getTableTypeAssignment_2(), "rule__Type__TableTypeAssignment_2");
					put(grammarAccess.getVectorAccess().getPrimTypeAssignment_1_0(), "rule__Vector__PrimTypeAssignment_1_0");
					put(grammarAccess.getVectorAccess().getTableTypeAssignment_1_1(), "rule__Vector__TableTypeAssignment_1_1");
					put(grammarAccess.getTableTypeAccess().getTypeAssignment(), "rule__TableType__TypeAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			maxim.zaks.ui.contentassist.antlr.internal.InternalFlatBuffersParser typedParser = (maxim.zaks.ui.contentassist.antlr.internal.InternalFlatBuffersParser) parser;
			typedParser.entryRuleSchema();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public FlatBuffersGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(FlatBuffersGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
