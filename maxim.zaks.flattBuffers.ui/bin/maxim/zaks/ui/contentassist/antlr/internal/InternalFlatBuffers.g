/*
 * generated by Xtext
 */
grammar InternalFlatBuffers;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package maxim.zaks.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package maxim.zaks.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import maxim.zaks.services.FlatBuffersGrammarAccess;

}

@parser::members {
 
 	private FlatBuffersGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(FlatBuffersGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleSchema
entryRuleSchema 
:
{ before(grammarAccess.getSchemaRule()); }
	 ruleSchema
{ after(grammarAccess.getSchemaRule()); } 
	 EOF 
;

// Rule Schema
ruleSchema
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSchemaAccess().getGroup()); }
(rule__Schema__Group__0)
{ after(grammarAccess.getSchemaAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRootType
entryRuleRootType 
:
{ before(grammarAccess.getRootTypeRule()); }
	 ruleRootType
{ after(grammarAccess.getRootTypeRule()); } 
	 EOF 
;

// Rule RootType
ruleRootType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRootTypeAccess().getGroup()); }
(rule__RootType__Group__0)
{ after(grammarAccess.getRootTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCustomAttributes
entryRuleCustomAttributes 
:
{ before(grammarAccess.getCustomAttributesRule()); }
	 ruleCustomAttributes
{ after(grammarAccess.getCustomAttributesRule()); } 
	 EOF 
;

// Rule CustomAttributes
ruleCustomAttributes
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCustomAttributesAccess().getGroup()); }
(rule__CustomAttributes__Group__0)
{ after(grammarAccess.getCustomAttributesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFileIdentifier
entryRuleFileIdentifier 
:
{ before(grammarAccess.getFileIdentifierRule()); }
	 ruleFileIdentifier
{ after(grammarAccess.getFileIdentifierRule()); } 
	 EOF 
;

// Rule FileIdentifier
ruleFileIdentifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFileIdentifierAccess().getGroup()); }
(rule__FileIdentifier__Group__0)
{ after(grammarAccess.getFileIdentifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamespace
entryRuleNamespace 
:
{ before(grammarAccess.getNamespaceRule()); }
	 ruleNamespace
{ after(grammarAccess.getNamespaceRule()); } 
	 EOF 
;

// Rule Namespace
ruleNamespace
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamespaceAccess().getGroup()); }
(rule__Namespace__Group__0)
{ after(grammarAccess.getNamespaceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInclude
entryRuleInclude 
:
{ before(grammarAccess.getIncludeRule()); }
	 ruleInclude
{ after(grammarAccess.getIncludeRule()); } 
	 EOF 
;

// Rule Include
ruleInclude
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIncludeAccess().getGroup()); }
(rule__Include__Group__0)
{ after(grammarAccess.getIncludeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTable
entryRuleTable 
:
{ before(grammarAccess.getTableRule()); }
	 ruleTable
{ after(grammarAccess.getTableRule()); } 
	 EOF 
;

// Rule Table
ruleTable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTableAccess().getGroup()); }
(rule__Table__Group__0)
{ after(grammarAccess.getTableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFields
entryRuleFields 
:
{ before(grammarAccess.getFieldsRule()); }
	 ruleFields
{ after(grammarAccess.getFieldsRule()); } 
	 EOF 
;

// Rule Fields
ruleFields
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFieldsAccess().getGroup()); }
(rule__Fields__Group__0)
{ after(grammarAccess.getFieldsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueAccess().getAlternatives()); }
(rule__Value__Alternatives)
{ after(grammarAccess.getValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFieldAttributes
entryRuleFieldAttributes 
:
{ before(grammarAccess.getFieldAttributesRule()); }
	 ruleFieldAttributes
{ after(grammarAccess.getFieldAttributesRule()); } 
	 EOF 
;

// Rule FieldAttributes
ruleFieldAttributes
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFieldAttributesAccess().getGroup()); }
(rule__FieldAttributes__Group__0)
{ after(grammarAccess.getFieldAttributesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeName
entryRuleAttributeName 
:
{ before(grammarAccess.getAttributeNameRule()); }
	 ruleAttributeName
{ after(grammarAccess.getAttributeNameRule()); } 
	 EOF 
;

// Rule AttributeName
ruleAttributeName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeNameAccess().getAlternatives()); }
(rule__AttributeName__Alternatives)
{ after(grammarAccess.getAttributeNameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVector
entryRuleVector 
:
{ before(grammarAccess.getVectorRule()); }
	 ruleVector
{ after(grammarAccess.getVectorRule()); } 
	 EOF 
;

// Rule Vector
ruleVector
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVectorAccess().getGroup()); }
(rule__Vector__Group__0)
{ after(grammarAccess.getVectorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimitive
entryRulePrimitive 
:
{ before(grammarAccess.getPrimitiveRule()); }
	 rulePrimitive
{ after(grammarAccess.getPrimitiveRule()); } 
	 EOF 
;

// Rule Primitive
rulePrimitive
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimitiveAccess().getAlternatives()); }
(rule__Primitive__Alternatives)
{ after(grammarAccess.getPrimitiveAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTableType
entryRuleTableType 
:
{ before(grammarAccess.getTableTypeRule()); }
	 ruleTableType
{ after(grammarAccess.getTableTypeRule()); } 
	 EOF 
;

// Rule TableType
ruleTableType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTableTypeAccess().getTypeAssignment()); }
(rule__TableType__TypeAssignment)
{ after(grammarAccess.getTableTypeAccess().getTypeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValidID
entryRuleValidID 
:
{ before(grammarAccess.getValidIDRule()); }
	 ruleValidID
{ after(grammarAccess.getValidIDRule()); } 
	 EOF 
;

// Rule ValidID
ruleValidID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumber
entryRuleNumber 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Number
ruleNumber
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberAccess().getGroup()); }
(rule__Number__Group__0)
{ after(grammarAccess.getNumberAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}




rule__Value__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getNumberParserRuleCall_0()); }
	ruleNumber
{ after(grammarAccess.getValueAccess().getNumberParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getFalseKeyword_1()); }

	'false' 

{ after(grammarAccess.getValueAccess().getFalseKeyword_1()); }
)

    |(
{ before(grammarAccess.getValueAccess().getTrueKeyword_2()); }

	'true' 

{ after(grammarAccess.getValueAccess().getTrueKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeName__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeNameAccess().getDeprectatedAssignment_0()); }
(rule__AttributeName__DeprectatedAssignment_0)
{ after(grammarAccess.getAttributeNameAccess().getDeprectatedAssignment_0()); }
)

    |(
{ before(grammarAccess.getAttributeNameAccess().getCustomNameAssignment_1()); }
(rule__AttributeName__CustomNameAssignment_1)
{ after(grammarAccess.getAttributeNameAccess().getCustomNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getPrimTypeAssignment_0()); }
(rule__Type__PrimTypeAssignment_0)
{ after(grammarAccess.getTypeAccess().getPrimTypeAssignment_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getVectorTypeAssignment_1()); }
(rule__Type__VectorTypeAssignment_1)
{ after(grammarAccess.getTypeAccess().getVectorTypeAssignment_1()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getTableTypeAssignment_2()); }
(rule__Type__TableTypeAssignment_2)
{ after(grammarAccess.getTypeAccess().getTableTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getPrimTypeAssignment_1_0()); }
(rule__Vector__PrimTypeAssignment_1_0)
{ after(grammarAccess.getVectorAccess().getPrimTypeAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getVectorAccess().getTableTypeAssignment_1_1()); }
(rule__Vector__TableTypeAssignment_1_1)
{ after(grammarAccess.getVectorAccess().getTableTypeAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primitive__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveAccess().getBoolKeyword_0()); }

	'bool' 

{ after(grammarAccess.getPrimitiveAccess().getBoolKeyword_0()); }
)

    |(
{ before(grammarAccess.getPrimitiveAccess().getByteKeyword_1()); }

	'byte' 

{ after(grammarAccess.getPrimitiveAccess().getByteKeyword_1()); }
)

    |(
{ before(grammarAccess.getPrimitiveAccess().getUbyteKeyword_2()); }

	'ubyte' 

{ after(grammarAccess.getPrimitiveAccess().getUbyteKeyword_2()); }
)

    |(
{ before(grammarAccess.getPrimitiveAccess().getShortKeyword_3()); }

	'short' 

{ after(grammarAccess.getPrimitiveAccess().getShortKeyword_3()); }
)

    |(
{ before(grammarAccess.getPrimitiveAccess().getUshortKeyword_4()); }

	'ushort' 

{ after(grammarAccess.getPrimitiveAccess().getUshortKeyword_4()); }
)

    |(
{ before(grammarAccess.getPrimitiveAccess().getIntKeyword_5()); }

	'int' 

{ after(grammarAccess.getPrimitiveAccess().getIntKeyword_5()); }
)

    |(
{ before(grammarAccess.getPrimitiveAccess().getUintKeyword_6()); }

	'uint' 

{ after(grammarAccess.getPrimitiveAccess().getUintKeyword_6()); }
)

    |(
{ before(grammarAccess.getPrimitiveAccess().getFloatKeyword_7()); }

	'float' 

{ after(grammarAccess.getPrimitiveAccess().getFloatKeyword_7()); }
)

    |(
{ before(grammarAccess.getPrimitiveAccess().getLongKeyword_8()); }

	'long' 

{ after(grammarAccess.getPrimitiveAccess().getLongKeyword_8()); }
)

    |(
{ before(grammarAccess.getPrimitiveAccess().getUlongKeyword_9()); }

	'ulong' 

{ after(grammarAccess.getPrimitiveAccess().getUlongKeyword_9()); }
)

    |(
{ before(grammarAccess.getPrimitiveAccess().getDoubleKeyword_10()); }

	'double' 

{ after(grammarAccess.getPrimitiveAccess().getDoubleKeyword_10()); }
)

    |(
{ before(grammarAccess.getPrimitiveAccess().getStringKeyword_11()); }

	'string' 

{ after(grammarAccess.getPrimitiveAccess().getStringKeyword_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Schema__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Schema__Group__0__Impl
	rule__Schema__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getIncludesAssignment_0()); }
(rule__Schema__IncludesAssignment_0)*
{ after(grammarAccess.getSchemaAccess().getIncludesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Schema__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Schema__Group__1__Impl
	rule__Schema__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getNamepsaceAssignment_1()); }
(rule__Schema__NamepsaceAssignment_1)?
{ after(grammarAccess.getSchemaAccess().getNamepsaceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Schema__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Schema__Group__2__Impl
	rule__Schema__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getFileIdentifierAssignment_2()); }
(rule__Schema__FileIdentifierAssignment_2)?
{ after(grammarAccess.getSchemaAccess().getFileIdentifierAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Schema__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Schema__Group__3__Impl
	rule__Schema__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getCustomAttributesAssignment_3()); }
(rule__Schema__CustomAttributesAssignment_3)*
{ after(grammarAccess.getSchemaAccess().getCustomAttributesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Schema__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Schema__Group__4__Impl
	rule__Schema__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getTablesAssignment_4()); }
(rule__Schema__TablesAssignment_4)*
{ after(grammarAccess.getSchemaAccess().getTablesAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Schema__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Schema__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getRootTypeAssignment_5()); }
(rule__Schema__RootTypeAssignment_5)
{ after(grammarAccess.getSchemaAccess().getRootTypeAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__RootType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootType__Group__0__Impl
	rule__RootType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RootType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootTypeAccess().getRoot_typeKeyword_0()); }

	'root_type' 

{ after(grammarAccess.getRootTypeAccess().getRoot_typeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RootType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootType__Group__1__Impl
	rule__RootType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RootType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootTypeAccess().getTypeAssignment_1()); }
(rule__RootType__TypeAssignment_1)
{ after(grammarAccess.getRootTypeAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RootType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RootType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RootType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootTypeAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getRootTypeAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CustomAttributes__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomAttributes__Group__0__Impl
	rule__CustomAttributes__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomAttributes__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomAttributesAccess().getAttributeKeyword_0()); }

	'attribute' 

{ after(grammarAccess.getCustomAttributesAccess().getAttributeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CustomAttributes__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomAttributes__Group__1__Impl
	rule__CustomAttributes__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomAttributes__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomAttributesAccess().getQuotationMarkKeyword_1()); }

	'"' 

{ after(grammarAccess.getCustomAttributesAccess().getQuotationMarkKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CustomAttributes__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomAttributes__Group__2__Impl
	rule__CustomAttributes__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomAttributes__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomAttributesAccess().getNameAssignment_2()); }
(rule__CustomAttributes__NameAssignment_2)
{ after(grammarAccess.getCustomAttributesAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CustomAttributes__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomAttributes__Group__3__Impl
	rule__CustomAttributes__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomAttributes__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomAttributesAccess().getQuotationMarkKeyword_3()); }

	'"' 

{ after(grammarAccess.getCustomAttributesAccess().getQuotationMarkKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CustomAttributes__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomAttributes__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomAttributes__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomAttributesAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getCustomAttributesAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FileIdentifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FileIdentifier__Group__0__Impl
	rule__FileIdentifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FileIdentifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileIdentifierAccess().getFile_identifierKeyword_0()); }

	'file_identifier' 

{ after(grammarAccess.getFileIdentifierAccess().getFile_identifierKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FileIdentifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FileIdentifier__Group__1__Impl
	rule__FileIdentifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FileIdentifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileIdentifierAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
{ after(grammarAccess.getFileIdentifierAccess().getSTRINGTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FileIdentifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FileIdentifier__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FileIdentifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileIdentifierAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getFileIdentifierAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Namespace__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Namespace__Group__0__Impl
	rule__Namespace__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceAccess().getNamespaceKeyword_0()); }

	'namespace' 

{ after(grammarAccess.getNamespaceAccess().getNamespaceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Namespace__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Namespace__Group__1__Impl
	rule__Namespace__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceAccess().getNameAssignment_1()); }
(rule__Namespace__NameAssignment_1)
{ after(grammarAccess.getNamespaceAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Namespace__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Namespace__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getNamespaceAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Include__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Include__Group__0__Impl
	rule__Include__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeAccess().getIncludeKeyword_0()); }

	'include' 

{ after(grammarAccess.getIncludeAccess().getIncludeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Include__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Include__Group__1__Impl
	rule__Include__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
{ after(grammarAccess.getIncludeAccess().getSTRINGTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Include__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Include__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getIncludeAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Table__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Table__Group__0__Impl
	rule__Table__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableAccess().getTableKeyword_0()); }

	'table' 

{ after(grammarAccess.getTableAccess().getTableKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Table__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Table__Group__1__Impl
	rule__Table__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableAccess().getNameAssignment_1()); }
(rule__Table__NameAssignment_1)
{ after(grammarAccess.getTableAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Table__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Table__Group__2__Impl
	rule__Table__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getTableAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Table__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Table__Group__3__Impl
	rule__Table__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableAccess().getFieldsAssignment_3()); }
(rule__Table__FieldsAssignment_3)*
{ after(grammarAccess.getTableAccess().getFieldsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Table__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Table__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getTableAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Fields__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fields__Group__0__Impl
	rule__Fields__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fields__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldsAccess().getNameAssignment_0()); }
(rule__Fields__NameAssignment_0)
{ after(grammarAccess.getFieldsAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fields__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fields__Group__1__Impl
	rule__Fields__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fields__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldsAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getFieldsAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fields__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fields__Group__2__Impl
	rule__Fields__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fields__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldsAccess().getTypeAssignment_2()); }
(rule__Fields__TypeAssignment_2)
{ after(grammarAccess.getFieldsAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fields__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fields__Group__3__Impl
	rule__Fields__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Fields__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldsAccess().getGroup_3()); }
(rule__Fields__Group_3__0)?
{ after(grammarAccess.getFieldsAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fields__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fields__Group__4__Impl
	rule__Fields__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Fields__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldsAccess().getAttributesAssignment_4()); }
(rule__Fields__AttributesAssignment_4)?
{ after(grammarAccess.getFieldsAccess().getAttributesAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fields__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fields__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fields__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldsAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getFieldsAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Fields__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fields__Group_3__0__Impl
	rule__Fields__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fields__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldsAccess().getEqualsSignKeyword_3_0()); }

	'=' 

{ after(grammarAccess.getFieldsAccess().getEqualsSignKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fields__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fields__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fields__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldsAccess().getDefaultValueAssignment_3_1()); }
(rule__Fields__DefaultValueAssignment_3_1)
{ after(grammarAccess.getFieldsAccess().getDefaultValueAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FieldAttributes__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldAttributes__Group__0__Impl
	rule__FieldAttributes__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldAttributes__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAttributesAccess().getAttributeListAssignment_0()); }
(rule__FieldAttributes__AttributeListAssignment_0)
{ after(grammarAccess.getFieldAttributesAccess().getAttributeListAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldAttributes__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldAttributes__Group__1__Impl
	rule__FieldAttributes__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldAttributes__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAttributesAccess().getAtributeNameAssignment_1()); }
(rule__FieldAttributes__AtributeNameAssignment_1)*
{ after(grammarAccess.getFieldAttributesAccess().getAtributeNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldAttributes__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldAttributes__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldAttributes__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAttributesAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getFieldAttributesAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Vector__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__0__Impl
	rule__Vector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getVectorAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__1__Impl
	rule__Vector__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getAlternatives_1()); }
(rule__Vector__Alternatives_1)
{ after(grammarAccess.getVectorAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getVectorAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); }
	ruleValidID
{ after(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); }
	ruleValidID
{ after(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Number__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Number__Group__0__Impl
	rule__Number__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Number__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getGroup_1()); }
(rule__Number__Group_1__0)?
{ after(grammarAccess.getNumberAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Number__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Number__Group_1__0__Impl
	rule__Number__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getNumberAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Number__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1()); }
	RULE_INT
{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Schema__IncludesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getIncludesIncludeParserRuleCall_0_0()); }
	ruleInclude{ after(grammarAccess.getSchemaAccess().getIncludesIncludeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__NamepsaceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getNamepsaceNamespaceParserRuleCall_1_0()); }
	ruleNamespace{ after(grammarAccess.getSchemaAccess().getNamepsaceNamespaceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__FileIdentifierAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getFileIdentifierFileIdentifierParserRuleCall_2_0()); }
	ruleFileIdentifier{ after(grammarAccess.getSchemaAccess().getFileIdentifierFileIdentifierParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__CustomAttributesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getCustomAttributesCustomAttributesParserRuleCall_3_0()); }
	ruleCustomAttributes{ after(grammarAccess.getSchemaAccess().getCustomAttributesCustomAttributesParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__TablesAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getTablesTableParserRuleCall_4_0()); }
	ruleTable{ after(grammarAccess.getSchemaAccess().getTablesTableParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Schema__RootTypeAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSchemaAccess().getRootTypeRootTypeParserRuleCall_5_0()); }
	ruleRootType{ after(grammarAccess.getSchemaAccess().getRootTypeRootTypeParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RootType__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootTypeAccess().getTypeTableCrossReference_1_0()); }
(
{ before(grammarAccess.getRootTypeAccess().getTypeTableIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getRootTypeAccess().getTypeTableIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getRootTypeAccess().getTypeTableCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CustomAttributes__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomAttributesAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getCustomAttributesAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Namespace__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getNamespaceAccess().getNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Table__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTableAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Table__FieldsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableAccess().getFieldsFieldsParserRuleCall_3_0()); }
	ruleFields{ after(grammarAccess.getTableAccess().getFieldsFieldsParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fields__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldsAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getFieldsAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fields__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldsAccess().getTypeTypeParserRuleCall_2_0()); }
	ruleType{ after(grammarAccess.getFieldsAccess().getTypeTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fields__DefaultValueAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldsAccess().getDefaultValueValueParserRuleCall_3_1_0()); }
	ruleValue{ after(grammarAccess.getFieldsAccess().getDefaultValueValueParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fields__AttributesAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldsAccess().getAttributesFieldAttributesParserRuleCall_4_0()); }
	ruleFieldAttributes{ after(grammarAccess.getFieldsAccess().getAttributesFieldAttributesParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldAttributes__AttributeListAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAttributesAccess().getAttributeListLeftParenthesisKeyword_0_0()); }
(
{ before(grammarAccess.getFieldAttributesAccess().getAttributeListLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getFieldAttributesAccess().getAttributeListLeftParenthesisKeyword_0_0()); }
)

{ after(grammarAccess.getFieldAttributesAccess().getAttributeListLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldAttributes__AtributeNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAttributesAccess().getAtributeNameAttributeNameParserRuleCall_1_0()); }
	ruleAttributeName{ after(grammarAccess.getFieldAttributesAccess().getAtributeNameAttributeNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeName__DeprectatedAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeNameAccess().getDeprectatedDeprecatedKeyword_0_0()); }
(
{ before(grammarAccess.getAttributeNameAccess().getDeprectatedDeprecatedKeyword_0_0()); }

	'deprecated' 

{ after(grammarAccess.getAttributeNameAccess().getDeprectatedDeprecatedKeyword_0_0()); }
)

{ after(grammarAccess.getAttributeNameAccess().getDeprectatedDeprecatedKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeName__CustomNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeNameAccess().getCustomNameCustomAttributesCrossReference_1_0()); }
(
{ before(grammarAccess.getAttributeNameAccess().getCustomNameCustomAttributesIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getAttributeNameAccess().getCustomNameCustomAttributesIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getAttributeNameAccess().getCustomNameCustomAttributesCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__PrimTypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getPrimTypePrimitiveParserRuleCall_0_0()); }
	rulePrimitive{ after(grammarAccess.getTypeAccess().getPrimTypePrimitiveParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__VectorTypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getVectorTypeVectorParserRuleCall_1_0()); }
	ruleVector{ after(grammarAccess.getTypeAccess().getVectorTypeVectorParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__TableTypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getTableTypeTableTypeParserRuleCall_2_0()); }
	ruleTableType{ after(grammarAccess.getTypeAccess().getTableTypeTableTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__PrimTypeAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getPrimTypePrimitiveParserRuleCall_1_0_0()); }
	rulePrimitive{ after(grammarAccess.getVectorAccess().getPrimTypePrimitiveParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__TableTypeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getTableTypeTableTypeParserRuleCall_1_1_0()); }
	ruleTableType{ after(grammarAccess.getVectorAccess().getTableTypeTableTypeParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TableType__TypeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTableTypeAccess().getTypeTableCrossReference_0()); }
(
{ before(grammarAccess.getTableTypeAccess().getTypeTableIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getTableTypeAccess().getTypeTableIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getTableTypeAccess().getTypeTableCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


