/*
 * generated by Xtext
 */
grammar InternalFlatBuffers;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package maxim.zaks.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package maxim.zaks.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import maxim.zaks.services.FlatBuffersGrammarAccess;

}

@parser::members {

 	private FlatBuffersGrammarAccess grammarAccess;
 	
    public InternalFlatBuffersParser(TokenStream input, FlatBuffersGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Schema";	
   	}
   	
   	@Override
   	protected FlatBuffersGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSchema
entryRuleSchema returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSchemaRule()); }
	 iv_ruleSchema=ruleSchema 
	 { $current=$iv_ruleSchema.current; } 
	 EOF 
;

// Rule Schema
ruleSchema returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSchemaAccess().getIncludesIncludeParserRuleCall_0_0()); 
	    }
		lv_includes_0_0=ruleInclude		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSchemaRule());
	        }
       		add(
       			$current, 
       			"includes",
        		lv_includes_0_0, 
        		"Include");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getSchemaAccess().getNamepsaceNamespaceParserRuleCall_1_0()); 
	    }
		lv_namepsace_1_0=ruleNamespace		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSchemaRule());
	        }
       		set(
       			$current, 
       			"namepsace",
        		lv_namepsace_1_0, 
        		"Namespace");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSchemaAccess().getFileIdentifierFileIdentifierParserRuleCall_2_0()); 
	    }
		lv_fileIdentifier_2_0=ruleFileIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSchemaRule());
	        }
       		set(
       			$current, 
       			"fileIdentifier",
        		lv_fileIdentifier_2_0, 
        		"FileIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSchemaAccess().getCustomAttributesCustomAttributesParserRuleCall_3_0()); 
	    }
		lv_customAttributes_3_0=ruleCustomAttributes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSchemaRule());
	        }
       		add(
       			$current, 
       			"customAttributes",
        		lv_customAttributes_3_0, 
        		"CustomAttributes");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getSchemaAccess().getTablesTableParserRuleCall_4_0()); 
	    }
		lv_tables_4_0=ruleTable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSchemaRule());
	        }
       		add(
       			$current, 
       			"tables",
        		lv_tables_4_0, 
        		"Table");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getSchemaAccess().getRootTypeRootTypeParserRuleCall_5_0()); 
	    }
		lv_rootType_5_0=ruleRootType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSchemaRule());
	        }
       		set(
       			$current, 
       			"rootType",
        		lv_rootType_5_0, 
        		"RootType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRootType
entryRuleRootType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRootTypeRule()); }
	 iv_ruleRootType=ruleRootType 
	 { $current=$iv_ruleRootType.current; } 
	 EOF 
;

// Rule RootType
ruleRootType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='root_type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRootTypeAccess().getRoot_typeKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRootTypeRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getRootTypeAccess().getTypeTableCrossReference_1_0()); 
	}

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRootTypeAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleCustomAttributes
entryRuleCustomAttributes returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCustomAttributesRule()); }
	 iv_ruleCustomAttributes=ruleCustomAttributes 
	 { $current=$iv_ruleCustomAttributes.current; } 
	 EOF 
;

// Rule CustomAttributes
ruleCustomAttributes returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='attribute' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCustomAttributesAccess().getAttributeKeyword_0());
    }
	otherlv_1='"' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCustomAttributesAccess().getQuotationMarkKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getCustomAttributesAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCustomAttributesRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='"' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCustomAttributesAccess().getQuotationMarkKeyword_3());
    }
	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCustomAttributesAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleFileIdentifier
entryRuleFileIdentifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFileIdentifierRule()); } 
	 iv_ruleFileIdentifier=ruleFileIdentifier 
	 { $current=$iv_ruleFileIdentifier.current.getText(); }  
	 EOF 
;

// Rule FileIdentifier
ruleFileIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='file_identifier' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFileIdentifierAccess().getFile_identifierKeyword_0()); 
    }
    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getFileIdentifierAccess().getSTRINGTerminalRuleCall_1()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFileIdentifierAccess().getSemicolonKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleNamespace
entryRuleNamespace returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamespaceRule()); }
	 iv_ruleNamespace=ruleNamespace 
	 { $current=$iv_ruleNamespace.current; } 
	 EOF 
;

// Rule Namespace
ruleNamespace returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='namespace' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNamespaceAccess().getNamespaceKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamespaceAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamespaceRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNamespaceAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleInclude
entryRuleInclude returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIncludeRule()); } 
	 iv_ruleInclude=ruleInclude 
	 { $current=$iv_ruleInclude.current.getText(); }  
	 EOF 
;

// Rule Include
ruleInclude returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='include' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIncludeAccess().getIncludeKeyword_0()); 
    }
    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getIncludeAccess().getSTRINGTerminalRuleCall_1()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIncludeAccess().getSemicolonKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleTable
entryRuleTable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTableRule()); }
	 iv_ruleTable=ruleTable 
	 { $current=$iv_ruleTable.current; } 
	 EOF 
;

// Rule Table
ruleTable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='table' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTableAccess().getTableKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTableAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTableAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTableAccess().getFieldsFieldsParserRuleCall_3_0()); 
	    }
		lv_fields_3_0=ruleFields		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTableRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_3_0, 
        		"Fields");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTableAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleFields
entryRuleFields returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldsRule()); }
	 iv_ruleFields=ruleFields 
	 { $current=$iv_ruleFields.current; } 
	 EOF 
;

// Rule Fields
ruleFields returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFieldsAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFieldsAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldsAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldsRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFieldsAccess().getEqualsSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldsAccess().getDefaultValueValueParserRuleCall_3_1_0()); 
	    }
		lv_defaultValue_4_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldsRule());
	        }
       		set(
       			$current, 
       			"defaultValue",
        		lv_defaultValue_4_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldsAccess().getAttributesFieldAttributesParserRuleCall_4_0()); 
	    }
		lv_attributes_5_0=ruleFieldAttributes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldsRule());
	        }
       		set(
       			$current, 
       			"attributes",
        		lv_attributes_5_0, 
        		"FieldAttributes");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFieldsAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleValue
entryRuleValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); } 
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current.getText(); }  
	 EOF 
;

// Rule Value
ruleValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValueAccess().getNumberParserRuleCall_0()); 
    }
    this_Number_0=ruleNumber    {
		$current.merge(this_Number_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getValueAccess().getFalseKeyword_1()); 
    }

    |
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getValueAccess().getTrueKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleFieldAttributes
entryRuleFieldAttributes returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldAttributesRule()); }
	 iv_ruleFieldAttributes=ruleFieldAttributes 
	 { $current=$iv_ruleFieldAttributes.current; } 
	 EOF 
;

// Rule FieldAttributes
ruleFieldAttributes returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_attributeList_0_0=	'(' 
    {
        newLeafNode(lv_attributeList_0_0, grammarAccess.getFieldAttributesAccess().getAttributeListLeftParenthesisKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldAttributesRule());
	        }
       		setWithLastConsumed($current, "attributeList", lv_attributeList_0_0, "(");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAttributesAccess().getAtributeNameAttributeNameParserRuleCall_1_0()); 
	    }
		lv_atributeName_1_0=ruleAttributeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldAttributesRule());
	        }
       		add(
       			$current, 
       			"atributeName",
        		lv_atributeName_1_0, 
        		"AttributeName");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFieldAttributesAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleAttributeName
entryRuleAttributeName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeNameRule()); }
	 iv_ruleAttributeName=ruleAttributeName 
	 { $current=$iv_ruleAttributeName.current; } 
	 EOF 
;

// Rule AttributeName
ruleAttributeName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_deprectated_0_0=	'deprecated' 
    {
        newLeafNode(lv_deprectated_0_0, grammarAccess.getAttributeNameAccess().getDeprectatedDeprecatedKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeNameRule());
	        }
       		setWithLastConsumed($current, "deprectated", true, "deprecated");
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeNameRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getAttributeNameAccess().getCustomNameCustomAttributesCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getPrimTypePrimitiveParserRuleCall_0_0()); 
	    }
		lv_primType_0_0=rulePrimitive		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"primType",
        		lv_primType_0_0, 
        		"Primitive");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getVectorTypeVectorParserRuleCall_1_0()); 
	    }
		lv_vectorType_1_0=ruleVector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"vectorType",
        		lv_vectorType_1_0, 
        		"Vector");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getTableTypeTableTypeParserRuleCall_2_0()); 
	    }
		lv_tableType_2_0=ruleTableType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"tableType",
        		lv_tableType_2_0, 
        		"TableType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVector
entryRuleVector returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVectorRule()); }
	 iv_ruleVector=ruleVector 
	 { $current=$iv_ruleVector.current; } 
	 EOF 
;

// Rule Vector
ruleVector returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVectorAccess().getLeftSquareBracketKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getVectorAccess().getPrimTypePrimitiveParserRuleCall_1_0_0()); 
	    }
		lv_primType_1_0=rulePrimitive		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVectorRule());
	        }
       		set(
       			$current, 
       			"primType",
        		lv_primType_1_0, 
        		"Primitive");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getVectorAccess().getTableTypeTableTypeParserRuleCall_1_1_0()); 
	    }
		lv_tableType_2_0=ruleTableType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVectorRule());
	        }
       		set(
       			$current, 
       			"tableType",
        		lv_tableType_2_0, 
        		"TableType");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVectorAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRulePrimitive
entryRulePrimitive returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimitiveRule()); } 
	 iv_rulePrimitive=rulePrimitive 
	 { $current=$iv_rulePrimitive.current.getText(); }  
	 EOF 
;

// Rule Primitive
rulePrimitive returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='bool' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveAccess().getBoolKeyword_0()); 
    }

    |
	kw='byte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveAccess().getByteKeyword_1()); 
    }

    |
	kw='ubyte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveAccess().getUbyteKeyword_2()); 
    }

    |
	kw='short' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveAccess().getShortKeyword_3()); 
    }

    |
	kw='ushort' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveAccess().getUshortKeyword_4()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveAccess().getIntKeyword_5()); 
    }

    |
	kw='uint' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveAccess().getUintKeyword_6()); 
    }

    |
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveAccess().getFloatKeyword_7()); 
    }

    |
	kw='long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveAccess().getLongKeyword_8()); 
    }

    |
	kw='ulong' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveAccess().getUlongKeyword_9()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveAccess().getDoubleKeyword_10()); 
    }

    |
	kw='string' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrimitiveAccess().getStringKeyword_11()); 
    }
)
    ;





// Entry rule entryRuleTableType
entryRuleTableType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTableTypeRule()); }
	 iv_ruleTableType=ruleTableType 
	 { $current=$iv_ruleTableType.current; } 
	 EOF 
;

// Rule TableType
ruleTableType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTableTypeRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getTableTypeAccess().getTypeTableCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); 
    }
    this_ValidID_2=ruleValidID    {
		$current.merge(this_ValidID_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleValidID
entryRuleValidID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValidIDRule()); } 
	 iv_ruleValidID=ruleValidID 
	 { $current=$iv_ruleValidID.current.getText(); }  
	 EOF 
;

// Rule ValidID
ruleValidID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); } 
	 iv_ruleNumber=ruleNumber 
	 { $current=$iv_ruleNumber.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getNumberAccess().getINTTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getFullStopKeyword_1_0()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1()); 
    }
)?)
    ;
finally {
	myHiddenTokenState.restore();
}





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


