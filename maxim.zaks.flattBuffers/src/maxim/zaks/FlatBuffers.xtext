grammar maxim.zaks.FlatBuffers with org.eclipse.xtext.common.Terminals

generate flatBuffers "http://www.zaks.maxim/FlatBuffers"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Schema:
	includes+=Include* &
	namepsace=Namespace? &
	fileIdentifier=FileIdentifier? &
	file_extension=FileExtension? &
	customAttributes+=CustomAttributes* &
	definitions+=Definition* &
	rootType=RootType
;

RootType:
	'root_type' type=[Table] ';'
;

CustomAttributes:
	'attribute' name=STRING ';'
;

FileIdentifier:
	'file_identifier' identifier=STRING ';'
;

FileExtension:
	'file_extension' STRING ';'	
;

Namespace:
	'namespace' name=QualifiedName ';'
;

Include:
	'include' STRING ';'
;

Definition: 
	Table | Struct | Enum | Union
;

Struct:
	'struct' name=ID attributes=Attributes? '{'
	fields+=StructField*
	'}'	
;

StructField:
	name=ValidID ':' (primType=PrimitiveWithoutString | defType=[ScalarType] ) ';'
;

ScalarType:
	Struct|Enum
;
	
Table:
	'table' name=ID attributes=Attributes? '{'
	fields+=Field*
	'}';

Field:
	name=ValidID ':' type=Type ('=' defaultValue=Value)? attributes=Attributes? ';'
;

Value:
	number=Number | isFalse?='false' | isTrue?='true' | enumCase=ID
;

Attributes:
	'(' atributeNames+=AttributeName (',' atributeNames+=AttributeName)* ')'
;

AttributeName:
	(
		deprectated?=DEPRECTED_ATTRIBUTE | 
		hasAttributeId?=ID_ATTRIBUTE ':' attributeId=INT | 
		required?=REQUIRED_ATTRIBUTE | 
		original_order?='original_order' |
		hasAlignSize?='force_align' ':' alignSize = INT |
		hasHash?=HASH_ATTRIBUTE ':' hashKey = STRING |
		bit_flags?= 'bit_flags' |
		hasNestedTableName?='nested_flatbuffer' ':' nestedTableName=STRING |
		key?=KEY_ATTRIBUTE |
		customName=[CustomAttributes] (':' (intValue=INT | stringValue=STRING))?
	)
;


Type:
	( primType=Primitive | vectorType=Vector |  defType=[Definition] | qualifiedType=QualifiedType) 
;

QualifiedType:
	ValidID '.' ValidID ('.' ValidID)*
;


Vector hidden():
	'[' type=Type ']'
;

PrimitiveWithoutString:
	'bool' | 'float' | 'double' |  PrimitiveNumberType 	
;


Primitive:
	'string' | PrimitiveWithoutString 	
;

Enum:
	'enum' name=ID ':' type=PrimitiveNumberType attributes=Attributes? '{' enumCases += EnumCase (',' enumCases += EnumCase)* (',')? '}'	
;

EnumCase:
	name = ID (hasValue?='=' value=INT)?
;

Union:
	'union' name=ID '{'unionCases += [Table] (',' unionCases += [Table])* (',')? '}'
;

PrimitiveNumberType:
	'byte' | 'ubyte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong'  	
;

QualifiedName:
  ValidID ('.' ValidID)*;
  
ValidID:
  HASH_ATTRIBUTE | ID_ATTRIBUTE | REQUIRED_ATTRIBUTE | KEY_ATTRIBUTE | DEPRECTED_ATTRIBUTE | ID;
  
terminal ID_ATTRIBUTE:
	'id'
;

terminal DEPRECTED_ATTRIBUTE:
	'deprecated'
;

terminal REQUIRED_ATTRIBUTE:
	'required'
;

terminal KEY_ATTRIBUTE:
	'key'
;
  
terminal HASH_ATTRIBUTE:
	'hash'
;

	
Number hidden():
	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;

terminal HEX:
	('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+ 
	('#' (('b'|'B')('i'|'I') | ('l'|'L')))?;
	
terminal INT returns ecore::EInt:
	'0'..'9' ('0'..'9'|'_')*; 

terminal DECIMAL:
	('-')?
	INT 
	(('e'|'E') ('+'|'-')? INT)? 
	(('b'|'B')('i'|'I'|'d'|'D') | ('l'|'L'|'d'|'D'|'f'|'F'))?;