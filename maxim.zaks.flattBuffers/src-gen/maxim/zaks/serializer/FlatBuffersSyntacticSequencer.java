/*
 * generated by Xtext
 */
package maxim.zaks.serializer;

import com.google.inject.Inject;
import java.util.List;
import maxim.zaks.services.FlatBuffersGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class FlatBuffersSyntacticSequencer extends AbstractSyntacticSequencer {

	protected FlatBuffersGrammarAccess grammarAccess;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (FlatBuffersGrammarAccess) access;
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getDEPRECTED_ATTRIBUTERule())
			return getDEPRECTED_ATTRIBUTEToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getHASH_ATTRIBUTERule())
			return getHASH_ATTRIBUTEToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getID_ATTRIBUTERule())
			return getID_ATTRIBUTEToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getKEY_ATTRIBUTERule())
			return getKEY_ATTRIBUTEToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getREQUIRED_ATTRIBUTERule())
			return getREQUIRED_ATTRIBUTEToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal DEPRECTED_ATTRIBUTE:
	 * 	'deprecated'
	 * ;
	 */
	protected String getDEPRECTED_ATTRIBUTEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "deprecated";
	}
	
	/**
	 * terminal HASH_ATTRIBUTE:
	 * 	'hash'
	 * ;
	 */
	protected String getHASH_ATTRIBUTEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "hash";
	}
	
	/**
	 * terminal ID_ATTRIBUTE:
	 * 	'id'
	 * ;
	 */
	protected String getID_ATTRIBUTEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "id";
	}
	
	/**
	 * terminal KEY_ATTRIBUTE:
	 * 	'key'
	 * ;
	 */
	protected String getKEY_ATTRIBUTEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "key";
	}
	
	/**
	 * terminal REQUIRED_ATTRIBUTE:
	 * 	'required'
	 * ;
	 */
	protected String getREQUIRED_ATTRIBUTEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "required";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

}
