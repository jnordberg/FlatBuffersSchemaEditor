/*
 * generated by Xtext
 */
package maxim.zaks.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FlatBuffersGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Schema");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIncludesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIncludesIncludeParserRuleCall_0_0 = (RuleCall)cIncludesAssignment_0.eContents().get(0);
		private final Assignment cNamepsaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamepsaceNamespaceParserRuleCall_1_0 = (RuleCall)cNamepsaceAssignment_1.eContents().get(0);
		private final Assignment cFileIdentifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileIdentifierFileIdentifierParserRuleCall_2_0 = (RuleCall)cFileIdentifierAssignment_2.eContents().get(0);
		private final Assignment cCustomAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCustomAttributesCustomAttributesParserRuleCall_3_0 = (RuleCall)cCustomAttributesAssignment_3.eContents().get(0);
		private final Assignment cTablesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTablesTableParserRuleCall_4_0 = (RuleCall)cTablesAssignment_4.eContents().get(0);
		private final Assignment cRootTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRootTypeRootTypeParserRuleCall_5_0 = (RuleCall)cRootTypeAssignment_5.eContents().get(0);
		
		//Schema:
		//	includes+=Include* namepsace=Namespace? fileIdentifier=FileIdentifier? customAttributes+=CustomAttributes*
		//	tables+=Table* rootType=RootType;
		@Override public ParserRule getRule() { return rule; }

		//includes+=Include* namepsace=Namespace? fileIdentifier=FileIdentifier? customAttributes+=CustomAttributes*
		//tables+=Table* rootType=RootType
		public Group getGroup() { return cGroup; }

		//includes+=Include*
		public Assignment getIncludesAssignment_0() { return cIncludesAssignment_0; }

		//Include
		public RuleCall getIncludesIncludeParserRuleCall_0_0() { return cIncludesIncludeParserRuleCall_0_0; }

		//namepsace=Namespace?
		public Assignment getNamepsaceAssignment_1() { return cNamepsaceAssignment_1; }

		//Namespace
		public RuleCall getNamepsaceNamespaceParserRuleCall_1_0() { return cNamepsaceNamespaceParserRuleCall_1_0; }

		//fileIdentifier=FileIdentifier?
		public Assignment getFileIdentifierAssignment_2() { return cFileIdentifierAssignment_2; }

		//FileIdentifier
		public RuleCall getFileIdentifierFileIdentifierParserRuleCall_2_0() { return cFileIdentifierFileIdentifierParserRuleCall_2_0; }

		//customAttributes+=CustomAttributes*
		public Assignment getCustomAttributesAssignment_3() { return cCustomAttributesAssignment_3; }

		//CustomAttributes
		public RuleCall getCustomAttributesCustomAttributesParserRuleCall_3_0() { return cCustomAttributesCustomAttributesParserRuleCall_3_0; }

		//tables+=Table*
		public Assignment getTablesAssignment_4() { return cTablesAssignment_4; }

		//Table
		public RuleCall getTablesTableParserRuleCall_4_0() { return cTablesTableParserRuleCall_4_0; }

		//rootType=RootType
		public Assignment getRootTypeAssignment_5() { return cRootTypeAssignment_5; }

		//RootType
		public RuleCall getRootTypeRootTypeParserRuleCall_5_0() { return cRootTypeRootTypeParserRuleCall_5_0; }
	}

	public class RootTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RootType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoot_typeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTableCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTableIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeTableCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RootType:
		//	"root_type" type=[Table] ";";
		@Override public ParserRule getRule() { return rule; }

		//"root_type" type=[Table] ";"
		public Group getGroup() { return cGroup; }

		//"root_type"
		public Keyword getRoot_typeKeyword_0() { return cRoot_typeKeyword_0; }

		//type=[Table]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[Table]
		public CrossReference getTypeTableCrossReference_1_0() { return cTypeTableCrossReference_1_0; }

		//ID
		public RuleCall getTypeTableIDTerminalRuleCall_1_0_1() { return cTypeTableIDTerminalRuleCall_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class CustomAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomAttributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CustomAttributes:
		//	"attribute" "\"" name=ID "\"" ";";
		@Override public ParserRule getRule() { return rule; }

		//"attribute" "\"" name=ID "\"" ";"
		public Group getGroup() { return cGroup; }

		//"attribute"
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_1() { return cQuotationMarkKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"\""
		public Keyword getQuotationMarkKeyword_3() { return cQuotationMarkKeyword_3; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class FileIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FileIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFile_identifierKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FileIdentifier:
		//	"file_identifier" STRING ";";
		@Override public ParserRule getRule() { return rule; }

		//"file_identifier" STRING ";"
		public Group getGroup() { return cGroup; }

		//"file_identifier"
		public Keyword getFile_identifierKeyword_0() { return cFile_identifierKeyword_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class NamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Namespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Namespace:
		//	"namespace" name=QualifiedName ";";
		@Override public ParserRule getRule() { return rule; }

		//"namespace" name=QualifiedName ";"
		public Group getGroup() { return cGroup; }

		//"namespace"
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Include:
		//	"include" STRING ";";
		@Override public ParserRule getRule() { return rule; }

		//"include" STRING ";"
		public Group getGroup() { return cGroup; }

		//"include"
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsFieldsParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Table:
		//	"table" name=ID "{" fields+=Fields* "}";
		@Override public ParserRule getRule() { return rule; }

		//"table" name=ID "{" fields+=Fields* "}"
		public Group getGroup() { return cGroup; }

		//"table"
		public Keyword getTableKeyword_0() { return cTableKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//fields+=Fields*
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }

		//Fields
		public RuleCall getFieldsFieldsParserRuleCall_3_0() { return cFieldsFieldsParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class FieldsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fields");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefaultValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultValueValueParserRuleCall_3_1_0 = (RuleCall)cDefaultValueAssignment_3_1.eContents().get(0);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributesFieldAttributesParserRuleCall_4_0 = (RuleCall)cAttributesAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Fields:
		//	name=ID ":" type=Type ("=" defaultValue=Value)? attributes=FieldAttributes? ";";
		@Override public ParserRule getRule() { return rule; }

		//name=ID ":" type=Type ("=" defaultValue=Value)? attributes=FieldAttributes? ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//("=" defaultValue=Value)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//defaultValue=Value
		public Assignment getDefaultValueAssignment_3_1() { return cDefaultValueAssignment_3_1; }

		//Value
		public RuleCall getDefaultValueValueParserRuleCall_3_1_0() { return cDefaultValueValueParserRuleCall_3_1_0; }

		//attributes=FieldAttributes?
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }

		//FieldAttributes
		public RuleCall getAttributesFieldAttributesParserRuleCall_4_0() { return cAttributesFieldAttributesParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTrueKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Value:
		//	Number | "false" | "true";
		@Override public ParserRule getRule() { return rule; }

		//Number | "false" | "true"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Number
		public RuleCall getNumberParserRuleCall_0() { return cNumberParserRuleCall_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }

		//"true"
		public Keyword getTrueKeyword_2() { return cTrueKeyword_2; }
	}

	public class FieldAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldAttributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAttributeListLeftParenthesisKeyword_0_0 = (Keyword)cAttributeListAssignment_0.eContents().get(0);
		private final Assignment cAtributeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAtributeNameAttributeNameParserRuleCall_1_0 = (RuleCall)cAtributeNameAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FieldAttributes:
		//	attributeList="(" atributeName+=AttributeName* ")";
		@Override public ParserRule getRule() { return rule; }

		//attributeList="(" atributeName+=AttributeName* ")"
		public Group getGroup() { return cGroup; }

		//attributeList="("
		public Assignment getAttributeListAssignment_0() { return cAttributeListAssignment_0; }

		//"("
		public Keyword getAttributeListLeftParenthesisKeyword_0_0() { return cAttributeListLeftParenthesisKeyword_0_0; }

		//atributeName+=AttributeName*
		public Assignment getAtributeNameAssignment_1() { return cAtributeNameAssignment_1; }

		//AttributeName
		public RuleCall getAtributeNameAttributeNameParserRuleCall_1_0() { return cAtributeNameAttributeNameParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class AttributeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDeprectatedAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cDeprectatedDeprecatedKeyword_0_0 = (Keyword)cDeprectatedAssignment_0.eContents().get(0);
		private final Assignment cCustomNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cCustomNameCustomAttributesCrossReference_1_0 = (CrossReference)cCustomNameAssignment_1.eContents().get(0);
		private final RuleCall cCustomNameCustomAttributesIDTerminalRuleCall_1_0_1 = (RuleCall)cCustomNameCustomAttributesCrossReference_1_0.eContents().get(1);
		
		//AttributeName:
		//	deprectated?="deprecated" | customName=[CustomAttributes];
		@Override public ParserRule getRule() { return rule; }

		//deprectated?="deprecated" | customName=[CustomAttributes]
		public Alternatives getAlternatives() { return cAlternatives; }

		//deprectated?="deprecated"
		public Assignment getDeprectatedAssignment_0() { return cDeprectatedAssignment_0; }

		//"deprecated"
		public Keyword getDeprectatedDeprecatedKeyword_0_0() { return cDeprectatedDeprecatedKeyword_0_0; }

		//customName=[CustomAttributes]
		public Assignment getCustomNameAssignment_1() { return cCustomNameAssignment_1; }

		//[CustomAttributes]
		public CrossReference getCustomNameCustomAttributesCrossReference_1_0() { return cCustomNameCustomAttributesCrossReference_1_0; }

		//ID
		public RuleCall getCustomNameCustomAttributesIDTerminalRuleCall_1_0_1() { return cCustomNameCustomAttributesIDTerminalRuleCall_1_0_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPrimTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPrimTypePrimitiveParserRuleCall_0_0 = (RuleCall)cPrimTypeAssignment_0.eContents().get(0);
		private final Assignment cVectorTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVectorTypeVectorParserRuleCall_1_0 = (RuleCall)cVectorTypeAssignment_1.eContents().get(0);
		private final Assignment cTableTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cTableTypeTableTypeParserRuleCall_2_0 = (RuleCall)cTableTypeAssignment_2.eContents().get(0);
		
		//Type:
		//	primType=Primitive | vectorType=Vector | tableType=TableType;
		@Override public ParserRule getRule() { return rule; }

		//primType=Primitive | vectorType=Vector | tableType=TableType
		public Alternatives getAlternatives() { return cAlternatives; }

		//primType=Primitive
		public Assignment getPrimTypeAssignment_0() { return cPrimTypeAssignment_0; }

		//Primitive
		public RuleCall getPrimTypePrimitiveParserRuleCall_0_0() { return cPrimTypePrimitiveParserRuleCall_0_0; }

		//vectorType=Vector
		public Assignment getVectorTypeAssignment_1() { return cVectorTypeAssignment_1; }

		//Vector
		public RuleCall getVectorTypeVectorParserRuleCall_1_0() { return cVectorTypeVectorParserRuleCall_1_0; }

		//tableType=TableType
		public Assignment getTableTypeAssignment_2() { return cTableTypeAssignment_2; }

		//TableType
		public RuleCall getTableTypeTableTypeParserRuleCall_2_0() { return cTableTypeTableTypeParserRuleCall_2_0; }
	}

	public class VectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Vector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cPrimTypeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cPrimTypePrimitiveParserRuleCall_1_0_0 = (RuleCall)cPrimTypeAssignment_1_0.eContents().get(0);
		private final Assignment cTableTypeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cTableTypeTableTypeParserRuleCall_1_1_0 = (RuleCall)cTableTypeAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Vector:
		//	"[" (primType=Primitive | tableType=TableType) "]";
		@Override public ParserRule getRule() { return rule; }

		//"[" (primType=Primitive | tableType=TableType) "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//primType=Primitive | tableType=TableType
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//primType=Primitive
		public Assignment getPrimTypeAssignment_1_0() { return cPrimTypeAssignment_1_0; }

		//Primitive
		public RuleCall getPrimTypePrimitiveParserRuleCall_1_0_0() { return cPrimTypePrimitiveParserRuleCall_1_0_0; }

		//tableType=TableType
		public Assignment getTableTypeAssignment_1_1() { return cTableTypeAssignment_1_1; }

		//TableType
		public RuleCall getTableTypeTableTypeParserRuleCall_1_1_0() { return cTableTypeTableTypeParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class PrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBoolKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cByteKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cUbyteKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cShortKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cUshortKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cIntKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cUintKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cFloatKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cLongKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cUlongKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cDoubleKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cStringKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		
		//Primitive:
		//	"bool" | "byte" | "ubyte" | "short" | "ushort" | "int" | "uint" | "float" | "long" | "ulong" | "double" | "string";
		@Override public ParserRule getRule() { return rule; }

		//"bool" | "byte" | "ubyte" | "short" | "ushort" | "int" | "uint" | "float" | "long" | "ulong" | "double" | "string"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"bool"
		public Keyword getBoolKeyword_0() { return cBoolKeyword_0; }

		//"byte"
		public Keyword getByteKeyword_1() { return cByteKeyword_1; }

		//"ubyte"
		public Keyword getUbyteKeyword_2() { return cUbyteKeyword_2; }

		//"short"
		public Keyword getShortKeyword_3() { return cShortKeyword_3; }

		//"ushort"
		public Keyword getUshortKeyword_4() { return cUshortKeyword_4; }

		//"int"
		public Keyword getIntKeyword_5() { return cIntKeyword_5; }

		//"uint"
		public Keyword getUintKeyword_6() { return cUintKeyword_6; }

		//"float"
		public Keyword getFloatKeyword_7() { return cFloatKeyword_7; }

		//"long"
		public Keyword getLongKeyword_8() { return cLongKeyword_8; }

		//"ulong"
		public Keyword getUlongKeyword_9() { return cUlongKeyword_9; }

		//"double"
		public Keyword getDoubleKeyword_10() { return cDoubleKeyword_10; }

		//"string"
		public Keyword getStringKeyword_11() { return cStringKeyword_11; }
	}

	public class TableTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TableType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeTableCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeTableIDTerminalRuleCall_0_1 = (RuleCall)cTypeTableCrossReference_0.eContents().get(1);
		
		//TableType:
		//	type=[Table];
		@Override public ParserRule getRule() { return rule; }

		//type=[Table]
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//[Table]
		public CrossReference getTypeTableCrossReference_0() { return cTypeTableCrossReference_0; }

		//ID
		public RuleCall getTypeTableIDTerminalRuleCall_0_1() { return cTypeTableIDTerminalRuleCall_0_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ValidID ("." ValidID)*;
		@Override public ParserRule getRule() { return rule; }

		//ValidID ("." ValidID)*
		public Group getGroup() { return cGroup; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//("." ValidID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_1_1() { return cValidIDParserRuleCall_1_1; }
	}

	public class ValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidID");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ValidID:
		//	ID;
		@Override public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Number hidden():
		//	INT ("." INT)?;
		@Override public ParserRule getRule() { return rule; }

		//INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//("." INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	
	
	private final SchemaElements pSchema;
	private final RootTypeElements pRootType;
	private final CustomAttributesElements pCustomAttributes;
	private final FileIdentifierElements pFileIdentifier;
	private final NamespaceElements pNamespace;
	private final IncludeElements pInclude;
	private final TableElements pTable;
	private final FieldsElements pFields;
	private final ValueElements pValue;
	private final FieldAttributesElements pFieldAttributes;
	private final AttributeNameElements pAttributeName;
	private final TypeElements pType;
	private final VectorElements pVector;
	private final PrimitiveElements pPrimitive;
	private final TableTypeElements pTableType;
	private final QualifiedNameElements pQualifiedName;
	private final ValidIDElements pValidID;
	private final NumberElements pNumber;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FlatBuffersGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSchema = new SchemaElements();
		this.pRootType = new RootTypeElements();
		this.pCustomAttributes = new CustomAttributesElements();
		this.pFileIdentifier = new FileIdentifierElements();
		this.pNamespace = new NamespaceElements();
		this.pInclude = new IncludeElements();
		this.pTable = new TableElements();
		this.pFields = new FieldsElements();
		this.pValue = new ValueElements();
		this.pFieldAttributes = new FieldAttributesElements();
		this.pAttributeName = new AttributeNameElements();
		this.pType = new TypeElements();
		this.pVector = new VectorElements();
		this.pPrimitive = new PrimitiveElements();
		this.pTableType = new TableTypeElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pValidID = new ValidIDElements();
		this.pNumber = new NumberElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("maxim.zaks.FlatBuffers".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Schema:
	//	includes+=Include* namepsace=Namespace? fileIdentifier=FileIdentifier? customAttributes+=CustomAttributes*
	//	tables+=Table* rootType=RootType;
	public SchemaElements getSchemaAccess() {
		return pSchema;
	}
	
	public ParserRule getSchemaRule() {
		return getSchemaAccess().getRule();
	}

	//RootType:
	//	"root_type" type=[Table] ";";
	public RootTypeElements getRootTypeAccess() {
		return pRootType;
	}
	
	public ParserRule getRootTypeRule() {
		return getRootTypeAccess().getRule();
	}

	//CustomAttributes:
	//	"attribute" "\"" name=ID "\"" ";";
	public CustomAttributesElements getCustomAttributesAccess() {
		return pCustomAttributes;
	}
	
	public ParserRule getCustomAttributesRule() {
		return getCustomAttributesAccess().getRule();
	}

	//FileIdentifier:
	//	"file_identifier" STRING ";";
	public FileIdentifierElements getFileIdentifierAccess() {
		return pFileIdentifier;
	}
	
	public ParserRule getFileIdentifierRule() {
		return getFileIdentifierAccess().getRule();
	}

	//Namespace:
	//	"namespace" name=QualifiedName ";";
	public NamespaceElements getNamespaceAccess() {
		return pNamespace;
	}
	
	public ParserRule getNamespaceRule() {
		return getNamespaceAccess().getRule();
	}

	//Include:
	//	"include" STRING ";";
	public IncludeElements getIncludeAccess() {
		return pInclude;
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}

	//Table:
	//	"table" name=ID "{" fields+=Fields* "}";
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}

	//Fields:
	//	name=ID ":" type=Type ("=" defaultValue=Value)? attributes=FieldAttributes? ";";
	public FieldsElements getFieldsAccess() {
		return pFields;
	}
	
	public ParserRule getFieldsRule() {
		return getFieldsAccess().getRule();
	}

	//Value:
	//	Number | "false" | "true";
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//FieldAttributes:
	//	attributeList="(" atributeName+=AttributeName* ")";
	public FieldAttributesElements getFieldAttributesAccess() {
		return pFieldAttributes;
	}
	
	public ParserRule getFieldAttributesRule() {
		return getFieldAttributesAccess().getRule();
	}

	//AttributeName:
	//	deprectated?="deprecated" | customName=[CustomAttributes];
	public AttributeNameElements getAttributeNameAccess() {
		return pAttributeName;
	}
	
	public ParserRule getAttributeNameRule() {
		return getAttributeNameAccess().getRule();
	}

	//Type:
	//	primType=Primitive | vectorType=Vector | tableType=TableType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Vector:
	//	"[" (primType=Primitive | tableType=TableType) "]";
	public VectorElements getVectorAccess() {
		return pVector;
	}
	
	public ParserRule getVectorRule() {
		return getVectorAccess().getRule();
	}

	//Primitive:
	//	"bool" | "byte" | "ubyte" | "short" | "ushort" | "int" | "uint" | "float" | "long" | "ulong" | "double" | "string";
	public PrimitiveElements getPrimitiveAccess() {
		return pPrimitive;
	}
	
	public ParserRule getPrimitiveRule() {
		return getPrimitiveAccess().getRule();
	}

	//TableType:
	//	type=[Table];
	public TableTypeElements getTableTypeAccess() {
		return pTableType;
	}
	
	public ParserRule getTableTypeRule() {
		return getTableTypeAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//ValidID:
	//	ID;
	public ValidIDElements getValidIDAccess() {
		return pValidID;
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//Number hidden():
	//	INT ("." INT)?;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
